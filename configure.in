dnl Process this file with autoconf to produce a configure script.
AC_INIT(parse.c)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

RPM_RELEASE=1
AM_INIT_AUTOMAKE(libdv, 0.5pre)

AC_CANONICAL_HOST
AM_MAINTAINER_MODE
AC_DISABLE_SHARED

dnl Checks for programs.

AC_SUBST(CFLAGS)
AC_PROG_CC

dnl Add -Wall if gcc
if test "$GCC" = "yes"; then
   CFLAGS="-Wall -O2"
fi


AC_PROG_INSTALL
AM_PROG_LIBTOOL

use_asm=:
arch_x86=false

AC_DEFINE(_GNU_SOURCE)

AC_ARG_ENABLE(asm,
[  --disable-asm           disable use of architecture specific assembly code],
[	if test "$enableval" = "no"; then
		use_asm=false
	fi
])

use_sdl=false
AC_ARG_ENABLE(sdl,
[  --enable-sdl            enable use of SDL for display],
[     if test "$enableval" = "yes"; then
               use_sdl=:
       fi
])

use_xv=:
AC_ARG_ENABLE(xv,
[  --disable-xv            disable use of XVideo extension for display],
[     if test "$enableval" = "no"; then
               use_xv=false
       fi
])

AC_ARG_ENABLE(gprof,
[  --enable-gprof          enable compiler options for gprof profiling],
[	if test "$enableval" = "yes"; then
	  CFLAGS="$CFLAGS -g -pg"
	fi
])

if $use_asm; then
	case "$host_cpu" in
		i?86)
			arch_x86=:
			AC_DEFINE(ARCH_X86)
			;;
		*)
			;;
	esac
fi

AC_ARG_WITH(pal-yuv,
[  --with-pal-yuv=(YV12|YUY2)  Select YUV format for IEC PAL (YUY2 by default) ],
[
	case "$with_pal_yuv" in
	     YV12)
		AC_MSG_RESULT(YV12)
		AC_DEFINE(YUV_420_USE_YV12)
		;;
	     *)
            	AC_MSG_RESULT(YUY2)
		;;
	esac
]
)

AC_MSG_CHECKING(whether to enable debugging)
AC_ARG_WITH(debug,
[  --with-debug[=level]    Enable debugging.
  --without-debug	  Disable debugging (default). ],
[
	case "$with_debug" in
	     no)
		AC_MSG_RESULT(no)
		;;
	     yes)
	        AC_MSG_RESULT(yes)
		AC_DEFINE(DEBUG)		
		CFLAGS="$CFLAGS -g"
		;;
	     *)
	        AC_MSG_RESULT(DEBUG=$with_debug)
		AC_DEFINE_UNQUOTED(DEBUG,$with_debug)
		CFLAGS="$CFLAGS -g"
	        ;;
	esac
],
[ AC_MSG_RESULT(default=yes)
  AC_DEFINE(DEBUG)
  CFLAGS="$CFLAGS -g" 
]
)



AM_CONDITIONAL(HOST_X86, $arch_x86)

dnl Checks for libraries.

AM_PATH_GLIB(, 
[
	AC_DEFINE(HAVE_GLIB)
	LIBS="$LIBS $GLIB_LIBS"
 	CFLAGS="$CFLAGS $GLIB_CFLAGS" 	
], [
 	AC_MSG_ERROR([No glib. Bad.  Get it at:  http://www.gtk.org/. ])
])

AM_PATH_GTK(,
[
	AC_DEFINE(HAVE_GTK) 
	LIBS="$LIBS $GTK_LIBS" 
	CFLAGS="$CFLAGS $GTK_CFLAGS" 
])

if $use_sdl; then
	AM_PATH_SDL(1.1.6,
	[
		AC_DEFINE(HAVE_SDL) 
		LIBS="$LIBS $SDL_LIBS" 
		CFLAGS="$CFLAGS $SDL_CFLAGS"
 	])
fi

if $use_xv; then
      AC_CHECK_LIB(Xv,XvQueryAdaptors,)
fi

AC_CHECK_LIB(m, sqrt)

dnl Don't bother with popt on non-gcc build, because we make heavy use of 
dnl gcc struct initialization extension in our popt code.  (Could be fixed)
if test "$GCC" = "yes"; then
      AC_CHECK_LIB(popt, poptGetContext,,
      [
	AC_MSG_WARN(playdv needs the popt package for command line parsing.
 		    The source archive for popt is available at:  
			ftp://ftp.redhat.com/pub/redhat/code/popt)
      ])
fi

dnl Checks for header files.
AC_PATH_X
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_C_BIGENDIAN_CROSS
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_MMAP
AC_CHECK_FUNCS(gettimeofday)

AC_SUBST(ac_aux_dir)
AC_SUBST(RPM_RELEASE)

AC_OUTPUT(Makefile libdv.spec)
